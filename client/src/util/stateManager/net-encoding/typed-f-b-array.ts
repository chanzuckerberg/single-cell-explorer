// automatically generated by the FlatBuffers compiler, do not modify

import { CatInt16FBArray } from "../net-encoding/cat-int16-f-b-array";
import { CatInt32FBArray } from "../net-encoding/cat-int32-f-b-array";
import { CatInt8FBArray } from "../net-encoding/cat-int8-f-b-array";
import { Float32FBArray } from "../net-encoding/float32-f-b-array";
import { Float64FBArray } from "../net-encoding/float64-f-b-array";
import { Int32FBArray } from "../net-encoding/int32-f-b-array";
import { JSONEncodedFBArray } from "../net-encoding/j-s-o-n-encoded-f-b-array";
import { SparseFloat32FBArray } from "../net-encoding/sparse-float32-f-b-array";
import { SparseFloat64FBArray } from "../net-encoding/sparse-float64-f-b-array";
import { Uint32FBArray } from "../net-encoding/uint32-f-b-array";

export enum TypedFBArray {
  NONE = 0,
  Float32FBArray = 1,
  Int32FBArray = 2,
  Uint32FBArray = 3,
  Float64FBArray = 4,
  JSONEncodedFBArray = 5,
  CatInt8FBArray = 6,
  CatInt16FBArray = 7,
  CatInt32FBArray = 8,
  SparseFloat32FBArray = 9,
  SparseFloat64FBArray = 10,
}

export function unionToTypedFBArray(
  type: TypedFBArray,
  accessor: (
    obj:
      | CatInt16FBArray
      | CatInt32FBArray
      | CatInt8FBArray
      | Float32FBArray
      | Float64FBArray
      | Int32FBArray
      | JSONEncodedFBArray
      | SparseFloat32FBArray
      | SparseFloat64FBArray
      | Uint32FBArray
  ) =>
    | CatInt16FBArray
    | CatInt32FBArray
    | CatInt8FBArray
    | Float32FBArray
    | Float64FBArray
    | Int32FBArray
    | JSONEncodedFBArray
    | SparseFloat32FBArray
    | SparseFloat64FBArray
    | Uint32FBArray
    | null
):
  | CatInt16FBArray
  | CatInt32FBArray
  | CatInt8FBArray
  | Float32FBArray
  | Float64FBArray
  | Int32FBArray
  | JSONEncodedFBArray
  | SparseFloat32FBArray
  | SparseFloat64FBArray
  | Uint32FBArray
  | null {
  switch (TypedFBArray[type]) {
    case "NONE":
      return null;
    case "Float32FBArray":
      return accessor(new Float32FBArray())! as Float32FBArray;
    case "Int32FBArray":
      return accessor(new Int32FBArray())! as Int32FBArray;
    case "Uint32FBArray":
      return accessor(new Uint32FBArray())! as Uint32FBArray;
    case "Float64FBArray":
      return accessor(new Float64FBArray())! as Float64FBArray;
    case "JSONEncodedFBArray":
      return accessor(new JSONEncodedFBArray())! as JSONEncodedFBArray;
    case "CatInt8FBArray":
      return accessor(new CatInt8FBArray())! as CatInt8FBArray;
    case "CatInt16FBArray":
      return accessor(new CatInt16FBArray())! as CatInt16FBArray;
    case "CatInt32FBArray":
      return accessor(new CatInt32FBArray())! as CatInt32FBArray;
    case "SparseFloat32FBArray":
      return accessor(new SparseFloat32FBArray())! as SparseFloat32FBArray;
    case "SparseFloat64FBArray":
      return accessor(new SparseFloat64FBArray())! as SparseFloat64FBArray;
    default:
      return null;
  }
}

export function unionListToTypedFBArray(
  type: TypedFBArray,
  accessor: (
    index: number,
    obj:
      | CatInt16FBArray
      | CatInt32FBArray
      | CatInt8FBArray
      | Float32FBArray
      | Float64FBArray
      | Int32FBArray
      | JSONEncodedFBArray
      | SparseFloat32FBArray
      | SparseFloat64FBArray
      | Uint32FBArray
  ) =>
    | CatInt16FBArray
    | CatInt32FBArray
    | CatInt8FBArray
    | Float32FBArray
    | Float64FBArray
    | Int32FBArray
    | JSONEncodedFBArray
    | SparseFloat32FBArray
    | SparseFloat64FBArray
    | Uint32FBArray
    | null,
  index: number
):
  | CatInt16FBArray
  | CatInt32FBArray
  | CatInt8FBArray
  | Float32FBArray
  | Float64FBArray
  | Int32FBArray
  | JSONEncodedFBArray
  | SparseFloat32FBArray
  | SparseFloat64FBArray
  | Uint32FBArray
  | null {
  switch (TypedFBArray[type]) {
    case "NONE":
      return null;
    case "Float32FBArray":
      return accessor(index, new Float32FBArray())! as Float32FBArray;
    case "Int32FBArray":
      return accessor(index, new Int32FBArray())! as Int32FBArray;
    case "Uint32FBArray":
      return accessor(index, new Uint32FBArray())! as Uint32FBArray;
    case "Float64FBArray":
      return accessor(index, new Float64FBArray())! as Float64FBArray;
    case "JSONEncodedFBArray":
      return accessor(index, new JSONEncodedFBArray())! as JSONEncodedFBArray;
    case "CatInt8FBArray":
      return accessor(index, new CatInt8FBArray())! as CatInt8FBArray;
    case "CatInt16FBArray":
      return accessor(index, new CatInt16FBArray())! as CatInt16FBArray;
    case "CatInt32FBArray":
      return accessor(index, new CatInt32FBArray())! as CatInt32FBArray;
    case "SparseFloat32FBArray":
      return accessor(
        index,
        new SparseFloat32FBArray()
      )! as SparseFloat32FBArray;
    case "SparseFloat64FBArray":
      return accessor(
        index,
        new SparseFloat64FBArray()
      )! as SparseFloat64FBArray;
    default:
      return null;
  }
}
