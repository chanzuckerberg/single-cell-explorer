// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class Int16Array {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Int16Array {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsInt16Array(
    bb: flatbuffers.ByteBuffer,
    obj?: Int16Array
  ): Int16Array {
    return (obj || new Int16Array()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsInt16Array(
    bb: flatbuffers.ByteBuffer,
    obj?: Int16Array
  ): Int16Array {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Int16Array()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  data(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.readInt16(this.bb!.__vector(this.bb_pos + offset) + index * 2)
      : 0;
  }

  dataLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  dataArray(): Int16Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? new Int16Array(
          this.bb!.bytes().buffer,
          this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),
          this.bb!.__vector_len(this.bb_pos + offset)
        )
      : null;
  }

  static startInt16Array(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, dataOffset, 0);
  }

  static createDataVector(
    builder: flatbuffers.Builder,
    data: number[] | Int16Array
  ): flatbuffers.Offset;
  /**
   * @deprecated This Uint8Array overload will be removed in the future.
   */
  static createDataVector(
    builder: flatbuffers.Builder,
    data: number[] | Uint8Array
  ): flatbuffers.Offset;
  static createDataVector(
    builder: flatbuffers.Builder,
    data: number[] | Int16Array | Uint8Array
  ): flatbuffers.Offset {
    builder.startVector(2, data.length, 2);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt16(data[i]!);
    }
    return builder.endVector();
  }

  static startDataVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(2, numElems, 2);
  }

  static endInt16Array(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createInt16Array(
    builder: flatbuffers.Builder,
    dataOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    Int16Array.startInt16Array(builder);
    Int16Array.addData(builder, dataOffset);
    return Int16Array.endInt16Array(builder);
  }
}
