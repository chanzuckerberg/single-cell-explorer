// automatically generated by the FlatBuffers compiler, do not modify

import { Float32Array } from "../net-encoding/float32-array";
import { Float64Array } from "../net-encoding/float64-array";
import { Int16Array } from "../net-encoding/int16-array";
import { Int32Array } from "../net-encoding/int32-array";
import { Int8Array } from "../net-encoding/int8-array";
import { JSONEncodedArray } from "../net-encoding/json-encoded-array";
import { Uint32Array } from "../net-encoding/uint32-array";

export enum TypedArray {
  NONE = 0,
  Float32Array = 1,
  Int8Array = 2,
  Int16Array = 3,
  Int32Array = 4,
  Uint32Array = 5,
  Float64Array = 6,
  JSONEncodedArray = 7,
}

export function unionToTypedArray(
  type: TypedArray,
  accessor: (
    obj:
      | Float32Array
      | Float64Array
      | Int16Array
      | Int32Array
      | Int8Array
      | JSONEncodedArray
      | Uint32Array
  ) =>
    | Float32Array
    | Float64Array
    | Int16Array
    | Int32Array
    | Int8Array
    | JSONEncodedArray
    | Uint32Array
    | null
):
  | Float32Array
  | Float64Array
  | Int16Array
  | Int32Array
  | Int8Array
  | JSONEncodedArray
  | Uint32Array
  | null {
  switch (TypedArray[type]) {
    case "NONE":
      return null;
    case "Float32Array":
      return accessor(new Float32Array())! as Float32Array;
    case "Int8Array":
      return accessor(new Int8Array())! as Int8Array;
    case "Int16Array":
      return accessor(new Int16Array())! as Int16Array;
    case "Int32Array":
      return accessor(new Int32Array())! as Int32Array;
    case "Uint32Array":
      return accessor(new Uint32Array())! as Uint32Array;
    case "Float64Array":
      return accessor(new Float64Array())! as Float64Array;
    case "JSONEncodedArray":
      return accessor(new JSONEncodedArray())! as JSONEncodedArray;
    default:
      return null;
  }
}

export function unionListToTypedArray(
  type: TypedArray,
  accessor: (
    index: number,
    obj:
      | Float32Array
      | Float64Array
      | Int16Array
      | Int32Array
      | Int8Array
      | JSONEncodedArray
      | Uint32Array
  ) =>
    | Float32Array
    | Float64Array
    | Int16Array
    | Int32Array
    | Int8Array
    | JSONEncodedArray
    | Uint32Array
    | null,
  index: number
):
  | Float32Array
  | Float64Array
  | Int16Array
  | Int32Array
  | Int8Array
  | JSONEncodedArray
  | Uint32Array
  | null {
  switch (TypedArray[type]) {
    case "NONE":
      return null;
    case "Float32Array":
      return accessor(index, new Float32Array())! as Float32Array;
    case "Int8Array":
      return accessor(index, new Int8Array())! as Int8Array;
    case "Int16Array":
      return accessor(index, new Int16Array())! as Int16Array;
    case "Int32Array":
      return accessor(index, new Int32Array())! as Int32Array;
    case "Uint32Array":
      return accessor(index, new Uint32Array())! as Uint32Array;
    case "Float64Array":
      return accessor(index, new Float64Array())! as Float64Array;
    case "JSONEncodedArray":
      return accessor(index, new JSONEncodedArray())! as JSONEncodedArray;
    default:
      return null;
  }
}
